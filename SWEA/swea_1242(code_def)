# 시간을 줄여보자
# 입력 받을때 rstrip 안 붙여서 딕셔너리 이용했을 때 오류나는 거였음
# 진짜 어이없넹 문제, 아마 입력 테케에 실수로 공백 입력한 것 있는 듯

# import sys
# sys.stdin = open("./sample_input.txt", "r")

def translate_hex(init_input):
    global CODE
    temp = []
    for ii in init_input:  # 16진수 코드 1줄을 돌면서
        temp.extend(BB[ii])  # 2진수로 변환해서 (str에 더하는 방식)
    CODE.append(list(temp))  # 한 줄을 통째로 리스트에 담아 저장

def make_ratio(N, bin_M):
    global codeset
    for n in range(N):  # 한 행씩 순회
        temp = []
        op = 0  # 초기 값 할당 (0 또는 1)
        cnt = 0  # 갯수를 셀 변수
        for i in range(bin_M):  # 한 행의 열들을 순회하는데
            cnt += 1  # 하나 갈 때마다 카운트 올림
            if op != CODE[n][i] or i + 1 == bin_M:  # 만약에 지금 op에 저장된 값과 다르거나, 다음이 코드의 끝이라면
                temp.append(cnt)  # 카운트 한 것을 담음
                op = CODE[n][i]  # op 변수 재할당
                cnt = 0  # 카운트 초기화

        if len(temp) < 32:
            continue

        s = 0  # 시작점 지정 (0부터)
        while 1:  # 뽑아온 temp의 길이가 32 이상인 경우에만 시작 (위 예시처럼 [2000]하나면 제낌)
            temp_cd = temp[s:s + 32]  # temp_cd는 temp의 s에서 s+31까지를 잘라서 할당해줌
            std_op = min(temp_cd)  # 비율을 나눠줄 기준 값 할당(temp_cd에서 가장 작은 값)
            temp_cd = list(map(lambda x:x//std_op, temp_cd)) # std_op(기준 값)으로 나눠줌
            temp_cd[0] = 7 - sum(temp_cd[1:4])  # 첫번째 값은 temp_cd의 2, 3, 4번째 값을 더한 것에서 빼준 값으로 할당
            codeset.add(''.join(map(str, temp_cd)))  # 완성된 코드를 str으로 합쳐서 삽입
            s += 32  # 하나 끝내고 나면 s에 32를 더해서 다음 반복 준비해줌
            if s >= len(temp) - 1:  # 만약 더해진 s값이 temp 변수 길이보다 초과되면 반복 중지
                break

def mamuri():
    global result
    for cd in codeset:  # codeset에서 만들어진 암호들을 가져옴
        temp_re = []  # 각 암호마다 결과 값 담을 임시 리스트 생성하고
        for i in range(0, 32, 4):  # 4개씩 끊어서 순회
            temp_re.append(C[cd[i:i + 4]])  # 딕셔너리에서 암호코드를 해석해서 암호르 담음

        holsu = 0  # 홀수 값 담을 변수
        jjaksu = 0  # 짝수 값 담을 변수
        for i3 in range(7):  # 맨 뒤의 것을 제외한 나머지 7개만 순회
            if i3 % 2 == 0:  # 자릿 수가 홀수면 (인덱스기에 나눠 떨어져야 홀수임)
                holsu += temp_re[i3]  # 홀수 변수에 값 추가
            else:  # 자릿 수가 짝수면
                jjaksu += temp_re[i3]  # 짝수 변수에 값 추가

        if ((holsu * 3) + jjaksu + temp_re[7]) % 10 == 0:  # 10으로 나누어 떨어지면
            result += sum(temp_re)  # 최종 결과 변수에 해당 암호문에 적혀있는 숫자들의 합 추가

##################################################################################

# 딕셔너리에 담아서 16진수를 변환하는게 더 빠를 듯
BB = {'0': [0, 0, 0, 0],
      '1': [0, 0, 0, 1],
      '2': [0, 0, 1, 0],
      '3': [0, 0, 1, 1],
      '4': [0, 1, 0, 0],
      '5': [0, 1, 0, 1],
      '6': [0, 1, 1, 0],
      '7': [0, 1, 1, 1],
      '8': [1, 0, 0, 0],
      '9': [1, 0, 0, 1],
      'A': [1, 0, 1, 0],
      'B': [1, 0, 1, 1],
      'C': [1, 1, 0, 0],
      'D': [1, 1, 0, 1],
      'E': [1, 1, 1, 0],
      'F': [1, 1, 1, 1]}

# 각 코드의 비율
C = {'3211': 0,
     '2221': 1,
     '2122': 2,
     '1411': 3,
     '1132': 4,
     '1231': 5,
     '1114': 6,
     '1312': 7,
     '1213': 8,
     '3112': 9}

##################################################################################

T = int(input())

for tc in range(1, T + 1):
    N, M = map(int, input().split())  # N개의 줄, M 가로 길이
    CODE = []
    for _ in range(N):
        init_input = list(input().strip())  # 16진수로 된 코드 한 줄을 입력받고
        translate_hex(init_input)

    codeset = set()  # 코드들을 담을 set: 중복된 코드를 담지 않기 위해 set 사용
    bin_M = M * 4  # 2진수로된 코드의 가로 길이
    make_ratio(N, bin_M)

    result = 0  # 최종 결과 변수
    mamuri()

    print(f'#{tc} {result}')  # 출력